<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu16.04+V100 CUDA</title>
      <link href="/2020/10/15/ubuntu16-04-v100-cuda/"/>
      <url>/2020/10/15/ubuntu16-04-v100-cuda/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu16-04-V100-Cuda"><a href="#Ubuntu16-04-V100-Cuda" class="headerlink" title="Ubuntu16.04+V100 Cuda"></a>Ubuntu16.04+V100 Cuda</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>Ubuntu16.04.7 Server with Tesla V100</li><li>NVIDIA-Linux-x86_64-450.80.02.run</li><li>cuda-11.0.2_450.51.05_linux.run</li></ul><h2 id="系统环境准备"><a href="#系统环境准备" class="headerlink" title="系统环境准备"></a>系统环境准备</h2><ol><li>查看GPU信息<br><code>$ lspci | grep -i nvidia</code></li><li>验证gcc<br><code>gcc --version</code><br><code>sudo apt-get install gcc</code></li><li>验证kernel版本对应的kernel header和package development<br><code>sudo apt-get install linux-headers-$(uname -r)</code></li><li>禁用nouveau驱动<br><code>lsmod | grep nouveau</code><br>有输出表示nouveau在加载中，需禁用。编辑配置文件<br><code>sudo vi /etc/modprobe.d/blacklist.conf</code><br>在文件底部添加两行内容：<br><code>blacklist nouveau</code><br><code>options nouveau modeset=0</code><br>输入下面命令使禁用生效<br><code>sudo update-initramfs -u</code><br>重启验证是否生效<h2 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h2><code>sudo chmod +x NVIDIA-Linux-x86_64-450.80.02.run</code><br><code>sudo sh NVIDIA-Linux-x86_64-450.80.02.run --no-opengl-files</code><br><code>nvidia-smi</code><h3 id="cuda安装"><a href="#cuda安装" class="headerlink" title="cuda安装"></a>cuda安装</h3><code>sudo chmod +x cuda-11.0.2_450.51.05_linux.run --no-opengl-libs</code><br><code>sudo sh cuda-11.0.2_450.51.05_linux.run</code><br>等待提示输入“accept”，组件选择取消勾选cuda driver。</li></ol><ul><li>Device  Node Verification<br><code>ls /dev/nvidia*</code></li></ul><p><code>sudo vi /etc/rc.local</code><br>/usr/local/cuda/samples/1_Utilities/deviceQuery<br>sudo make<br>./deviceQuery<br>ls -la /dev | grep nvidia</p><h3 id="Cudnn"><a href="#Cudnn" class="headerlink" title="Cudnn"></a>Cudnn</h3><p>tar -xvf cudnn-11.0-linux-x64-v8.0.4.30.tgz<br>sudo cp cuda/inclide/cudnn.h /usr/local/cuda/include/<br>sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/<br>sudo chmod a+x /usr/local/cuda/include/cudnn.h<br>sudo chmod a+x /usr/local/cuda/lib64/libcudnn*</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>zhuanlan.zhihu.com/p/47330858</li><li>docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html</li></ul>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep learning Environment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenPAI安装部署</title>
      <link href="/2020/08/18/openpai-an-zhuang-bu-shu/"/>
      <url>/2020/08/18/openpai-an-zhuang-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenPAI-安装部署"><a href="#OpenPAI-安装部署" class="headerlink" title="OpenPAI 安装部署"></a>OpenPAI 安装部署</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>三类主机</p><ul><li>Dev Box<ul><li>Ubuntu 16.04(18.04 也可以)</li><li>共享相同的用户名密码并具有超级权限,可SSH免密登录至其他主机</li><li>安装Docker</li></ul></li><li>Master<ul><li>Ubuntu 16.04(18.04 也可以)</li><li>静态IP，可与其他主机通信</li><li>共享相同的用户名密码并具有超级权限,开启SSH服务</li><li>开启NTP服务</li><li>足够的处理器和内存资源，内存至少32GB</li></ul></li><li>Worker<ul><li>Ubuntu 16.04(18.04 也可以)</li><li>静态IP，可与其他主机通信</li><li>共享相同的用户名密码并具有超级权限,开启SSH服务</li><li>安装GPU驱动， <code>nvidia-smi</code></li><li>安装Docker, <code>docker --version</code></li><li>安装nvidia-container-runtime, <code>sudo docker run nvidia/cuda:11.0-base nvidia-smi</code></li><li>足够的处理器和内存资源，内存至少32GB</li></ul></li></ul><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>所有操作均在Dev Box主机进行</p><ul><li>准备三个文件：master.csv，worker.csv，config</li></ul><p>master.csv和worker.csv格式(小写，无空格):<code>hostname,host-ip</code></p><p>config:</p><pre><code>user: &lt;ssh用户&gt;password: &lt;ssh密码&gt;branch_name: pai-1.1.ydocker_image_tag: v1.1.1gcr_image_repo: &quot;gcr.azk8s.cn&quot;kube_image_repo: &quot;gcr.azk8s.cn/google-containers&quot;kubeadm_download_url: &quot;https://shaiictestblob01.blob.core.chinacloudapi.cn/share-all/kubeadm&quot;hyperkube_download_url: &quot;https://shaiictestblob01.blob.core.chinacloudapi.cn/share-all/hyperkube&quot;openpai_kubespray_extra_var:pod_infra_image_repo: &quot;gcr.azk8s.cn/google_containers/pause-{{ image_arch }}&quot;dnsautoscaler_image_repo: &quot;gcr.azk8s.cn/google_containers/cluster-proportional-autoscaler-{{ image_arch }}&quot;tiller_image_repo: &quot;gcr.azk8s.cn/kubernetes-helm/tiller&quot;registry_proxy_image_repo: &quot;gcr.azk8s.cn/google_containers/kube-registry-proxy&quot;metrics_server_image_repo: &quot;gcr.azk8s.cn/google_containers/metrics-server-amd64&quot;addon_resizer_image_repo: &quot;gcr.azk8s.cn/google_containers/addon-resizer&quot;dashboard_image_repo: &quot;gcr.azk8s.cn/google_containers/kubernetes-dashboard-{{ image_arch }}&quot;</code></pre><p><strong>网络很重要，国内安装需要找到可用的镜像源,可将镜像源‘gcr.azk8s.cn’更换为</strong>：</p><pre><code>registry.cn-hangzhou.aliyuncs.com/google_containers/ #无cluster-proportional-autoscaler-amd64:1.6.0镜像registry.cn-hangzhou.aliyuncs.com/vinc-k8s/</code></pre><ul><li><p>开始安装<br>克隆OpenPAI工程</p><pre><code>git clone https://github.com/microsoft/pai.gitgit checkout pai-1.1.y  # change to a different branch if you want to deploy a different versioncd pai/contrib/kubespray</code></pre><p>安装并启动k8s</p><pre><code>/bin/bash quick-start-kubespray.sh -m /path/to/master.csv -w /path/to/worker.csv -c /path/to/config</code></pre><p>安装启动OpenPAI服务</p><pre><code>/bin/bash quick-start-service.sh -m /path/to/master.csv -w /path/to/worker.csv -c /path/to/config</code></pre></li><li><p>安装结束</p><pre><code>Kubernetes cluster config :     ~/pai-deploy/kube/configOpenPAI cluster config    :     ~/pai-deploy/cluster-cfgOpenPAI cluster ID        :     paiDefault username          :     adminDefault password          :     admin-passwordYou can go to http://&lt;your-master-ip&gt;, then use the default username and password to log in.</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenPAI </tag>
            
            <tag> Deep learning Cluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter notebook配置</title>
      <link href="/2020/08/10/jupiter-notebook-pei-zhi/"/>
      <url>/2020/08/10/jupiter-notebook-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Jupyter-notebook-配置"><a href="#Jupyter-notebook-配置" class="headerlink" title="Jupyter notebook 配置"></a>Jupyter notebook 配置</h1><h2 id="远程登录配置"><a href="#远程登录配置" class="headerlink" title="远程登录配置"></a>远程登录配置</h2><p>进入python 环境,输入下面语句</p><pre><code>&gt;&gt;&gt;from notebook.auth import passwd&gt;&gt;&gt;passwd()</code></pre><p>根据提示输入两遍要设置的密码,即可生成sha1的密文.</p><p>生成配置文件<br><code>jupyter notebook --generate-config</code><br>打开配置文件进行相关设置<br><code>vi ~/.jupyter/jupyter_notebook_config.py</code></p><pre><code>c.NotebookApp.ip = &#39;*&#39;  # 设置局域网内所有IP均可访问c.NotebookApp.password = u&#39;sha1:...&#39;  # 设置密码,填入上面生成的sha1密文c.NotebookApp.open_browser = False  # 设置不自动打开浏览器c.NotebookApp.port = &#39;8888&#39;  # 设置访问端口c.NotebookApp.notebook_dir = &#39;/home/user/Jupyter&#39;  # 设置工作目录</code></pre><h2 id="添加Anaconda虚拟环境"><a href="#添加Anaconda虚拟环境" class="headerlink" title="添加Anaconda虚拟环境"></a>添加Anaconda虚拟环境</h2><p>切换虚拟环境｀source activate ＜env_name&gt;｀</p><p>虚拟环境中安装ipykernel包并设置Notebook中显示的环境名称</p><pre><code>conda install ipykernelpython -m ipykernel install --user --name &lt;env_name&gt; --display-name &quot;&lt;display_name&gt;&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter </tag>
            
            <tag> Anacondas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-1 两数之和</title>
      <link href="/2020/08/05/leetcode-1-liang-shu-zhi-he/"/>
      <url>/2020/08/05/leetcode-1-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-1-两数之和"><a href="#LeetCode-1-两数之和" class="headerlink" title="LeetCode 1# 两数之和"></a>LeetCode 1# 两数之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组<code>nums</code>和一个目标值<code>target</code>,请在该数组中找出和为目标值的那两个整数,并返回他们的数组下标.</p><p>可以假设每种输入只会对应一个答案,但数组中同一元素不能使用两遍.</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回[0, 1]</code></pre><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>解法主要有2种:</p><ul><li>暴力穷举</li><li>哈希求解</li></ul><h3 id="暴力穷举"><a href="#暴力穷举" class="headerlink" title="暴力穷举"></a>暴力穷举</h3><p>通过两遍遍历寻找满足条件的两个值</p><pre><code>def two_sum(nums, target):    if len(nums) &lt; 2:        print(&quot;The number of nums is samller than two!&quot;)    else:        for i in range(len(nums) - 1):            for j in range(i+1, len(nums)):                if nums[i] + nums[j] = target:                    return [i, j]                else:                    continue</code></pre><p>通过一遍遍历每次寻找数组中是否存在另一个值和目标值与当前值的差相等</p><pre><code>def two_sum(nums, target):    if len(nums) &lt; 2:        print(&quot;The number of nums is samller than two!&quot;)    else:        for i in range(len(nums)):            val = target - nums[i]            if val in nums:                if i != nums.index(val):                    return [i, j]                else:                    continue            else:                continue</code></pre><h3 id="哈希求解"><a href="#哈希求解" class="headerlink" title="哈希求解"></a>哈希求解</h3><p>将数组值下标放入哈希表中,然后在哈希表中查找满足条件的两个值.使用字典来构建哈希表</p><pre><code>def two_sum(nums, target):    if len(nums) &lt; 2:        print(&quot;The number of nums is samller than two!&quot;)    else:        hash_dic = {}        for i in range(len(nums)):            hash_dic[target - nums[i]] = i        for i in range(len(nums)):            j = hash_dic.get(target - nums[i])            if j is not None and i != j:                return [i, j]</code></pre><p>在构建哈希表的同时进行搜索</p><pre><code>def two_sum(nums, target):    if len(nums) &lt; 2:        print(&quot;The number of nums is samller than two!&quot;)    else:        hash_dic = {}        for i in range(len(nums)):            if hash_dic.get(target - nums[i]) is not None:                return [i,hash_dic.get(target - nums[i]) ]            hash_dic[target - nums[i]] = i</code></pre>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Network Setting</title>
      <link href="/2020/07/10/ubuntu-network-setting/"/>
      <url>/2020/07/10/ubuntu-network-setting/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu网络设置"><a href="#Ubuntu网络设置" class="headerlink" title="Ubuntu网络设置"></a>Ubuntu网络设置</h1><p>目标： 解决Server版Ubuntu安装桌面后网络设置中看不到网卡，但命令行中可以看到</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>更改网络配置程序为NetworkManager</li></ol><p>编辑netplan配置文件50-cloud-init.yml： <code>$ sudo vi /etc/netplan/50-cloud-init.yml</code></p><pre><code>network:    ethernets:        ens33:        addresses: []        dhcp4:        optional:    version: 2    renderer: NetworkManager</code></pre><p>配置生效： <code>$ sudo netplan apply</code></p><ol start="2"><li>修改NetworkManager设置<br>修改配置文件中“managed=false”为“managed=true”<pre><code>$ sudo vi /etc/NetworkManager/NetworkManager.conf[main]plugins=ifupdown,keyfile[ifupdown]managed=true[device]wifi.scan-rand-mac-address=no</code></pre></li></ol><p>重启network-manager服务</p><pre><code>$ sudo service network-manager stop$ sudo rm /var/lib/NetworkManager/NetworkManager.state$ sudo service network-manager start</code></pre><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>Ubuntu 17.10引入了一个新的网络配置实用程序——netplan，后续版本中均使用该程序进行网络管理和配置。netplan有两个网络守护程序可以使用，分别为NetworkManager和Systemd-network。NetworkManager主要用于桌面系统的网络管理，Systemd-network则是用于服务器系统的网络管理。Ubuntu Server安装后默认使用Systemd-network进行网络配置，因此安装桌面系统之后更改网络管理程序为NetworkManage。</p><pre><code>renderer: NetworkManager # NetworkManagerrenderer: networkd # Systemd-network</code></pre><p>Reference:</p><ul><li><a href="https://blog.csdn.net/qq_44345567/article/details/106039844" target="_blank" rel="noopener">https://blog.csdn.net/qq_44345567/article/details/106039844</a></li><li><a href="https://blog.csdn.net/bobozai86/article/details/90714858" target="_blank" rel="noopener">https://blog.csdn.net/bobozai86/article/details/90714858</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Become a blogger</title>
      <link href="/2020/07/06/become-a-blogger/"/>
      <url>/2020/07/06/become-a-blogger/</url>
      
        <content type="html"><![CDATA[<h1 id="Become-a-blogger"><a href="#Become-a-blogger" class="headerlink" title="Become a blogger"></a>Become a blogger</h1><p>Objective: Create a personal blog using hexo and github pages</p><p>OS enviroment: Ubuntu 18.04</p><h2 id="Install-the-necessary-softwares"><a href="#Install-the-necessary-softwares" class="headerlink" title="Install the necessary softwares"></a>Install the necessary softwares</h2><ol><li>Install the Git <code>$ sudo apt-get install git-core</code></li><li>Install the Nodejs <code>$ sudo apt-get install nodejs</code></li><li>Install the Hexo<pre><code>$ sudo apt-get install npm$ npm install -g hexo-cli</code></pre></li></ol><h2 id="Setup-the-blog"><a href="#Setup-the-blog" class="headerlink" title="Setup the blog"></a>Setup the blog</h2><ol><li>Initialize hexo in target folder “BlogSite”<pre><code>$ hexo init BlogSite$ cd BlogSite$ npm install</code></pre></li><li>Configure the basic information about the blog in file “_config.yml”</li></ol><h2 id="Change-the-theme-to-matery"><a href="#Change-the-theme-to-matery" class="headerlink" title="Change the theme to matery"></a>Change the theme to matery</h2><ol><li>Clone the matery theme files <code>$ git clone https://github.com/blinkfox/hexo-theme-matery.git</code></li><li>Change the theme in configuration file “_config.yml”</li><li>Create menu pages<pre><code>$ hexo new page &quot;categories&quot;$ hexo new page &quot;tags&quot;$ hexo new page &quot;about&quot;$ hexo new page &quot;contact&quot;$ hexo new page &quot;friends&quot;</code></pre></li><li>Edit the contents of pages in “/source/<page>/index”</li><li>Configure highlight <code>$ npm i -S hexo-prism-plugin</code></li><li>Configure searching <code>$ npm install hexo-generator-search --save</code></li><li>Configure Pinyin link <code>$ npm i hexo-permalink-pinyin --save</code></li><li>Configure wordcount <code>$ npm i hexo-wordcount --save</code></li><li>Configure emoji <code>$ npm install hexo-filter-github-emojis --save</code></li><li>Configure RSS <code>$ npm install hexo-generator-feed --save</code></li></ol><h2 id="Configure-Github-Pages"><a href="#Configure-Github-Pages" class="headerlink" title="Configure Github Pages"></a>Configure Github Pages</h2><ol><li>Sign up github and create a new repository with the github username</li><li>Configure SSH<pre><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;$ cat ~/.ssh/id_rsa.pub</code></pre></li><li>Copy the rsa key to the github</li><li>Test the connection <code>$ ssh -T git@github.com</code></li><li>Configure personal information</li></ol><h2 id="Deploy-to-github"><a href="#Deploy-to-github" class="headerlink" title="Deploy to github"></a>Deploy to github</h2><ol><li>Edit the blog configuration file “_config.yml”</li><li>Deploy to github<pre><code>$ cd BlogSite$ hexo clean$ hexo g -d</code></pre></li><li>Open the browser and enter the url of your address</li></ol><p>Reference:</p><ul><li><a href="https://hexo.io./zh-cn/docs" target="_blank" rel="noopener">https://hexo.io./zh-cn/docs</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></li><li><a href="https://blog.csdn.net/grave2015/article/details/79961843" target="_blank" rel="noopener">https://blog.csdn.net/grave2015/article/details/79961843</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/01/hello-world/"/>
      <url>/2020/07/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
